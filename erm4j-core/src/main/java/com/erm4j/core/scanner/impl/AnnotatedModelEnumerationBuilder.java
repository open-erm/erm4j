package com.erm4j.core.scanner.impl;

import org.apache.commons.lang3.StringUtils;

import com.erm4j.core.annotations.ModelEnumeration;
import com.erm4j.core.bean.Enumeration;
import com.erm4j.core.bean.EnumerationItem;
import com.erm4j.core.scanner.ClassGraphEnumBuilder;
import com.erm4j.core.scanner.ClassInfoHelper;

import io.github.classgraph.AnnotationInfo;
import io.github.classgraph.AnnotationParameterValue;
import io.github.classgraph.ClassInfo;
import io.github.classgraph.ClassInfoList;
import io.github.classgraph.FieldInfo;
import io.github.classgraph.ScanResult;

/***
 * Implementation of {@link ClassGraphEnumBuilder} that builds
 * {@link Enumeration} object from classes annotated with {@link ModelEnumeration}  
 * @author root
 *
 */
public class AnnotatedModelEnumerationBuilder implements ClassGraphEnumBuilder {

	private final static String ENUMERATION_ANNOTATION_NAME = "com.erm4j.core.annotations.ModelEnumeration";
	private final static String ENUMERATION_ITEM_ANNOTATION_NAME = "com.erm4j.core.annotations.ModelEnumerationItem";
	private final static String UID_PARAM_NAME = "uid";
	private final static String SYSTEM_NAME_PARAM_NAME = "systemName";
	private final static String NAME_PARAM_NAME = "name";
	private final static String DESCRIPTION_PARAM_NAME = "description";


	@Override
	public void fillEnumerationFields(Enumeration enumeration, ClassInfo classInfo) {
		AnnotationInfo annotationInfo = classInfo.getAnnotationInfo(ENUMERATION_ANNOTATION_NAME);
		if (annotationInfo != null) {
			for (AnnotationParameterValue param : annotationInfo.getParameterValues()) {
				fillEnumFieldsFromAnnotationParam(enumeration, param);
			}
			
			//If no annotation parameters found - we preset fields with autogenerated values
			fillEnumFieldsWithAutogeneratedValues(enumeration, classInfo);
		}
	}

	@Override
	public boolean isApplicableFor(ClassInfo classInfo) {
		return classInfo != null && classInfo.hasAnnotation(ENUMERATION_ANNOTATION_NAME)
				&& classInfo.isEnum();
	}

	@Override
	public ClassInfoList getApplicableClassList(ScanResult scanResult) {
		return scanResult.getClassesWithAnnotation(ENUMERATION_ANNOTATION_NAME);
	}
	
	@Override
	public boolean isApplicableFor(FieldInfo fieldInfo) {
		return fieldInfo.hasAnnotation(ENUMERATION_ITEM_ANNOTATION_NAME);
	}

	@Override
	public void fillEnumerationItemFields(EnumerationItem item, FieldInfo fieldInfo) {
		AnnotationInfo annotationInfo = fieldInfo.getAnnotationInfo(ENUMERATION_ITEM_ANNOTATION_NAME);
		if (annotationInfo != null) {
			for (AnnotationParameterValue param : annotationInfo.getParameterValues()) {
				filltemFieldsFromAnnotationParam(item, param);
			}
			
			//If no annotation parameters found - we preset fields with autogenerated values
			fillItemFieldsWithAutogeneratedValues(item, fieldInfo.getClassInfo(), fieldInfo);

		}
	}

	private void fillItemFieldsWithAutogeneratedValues(EnumerationItem item, ClassInfo classInfo, FieldInfo fieldInfo) {
		if (StringUtils.isBlank(item.getUid())) {
			item.setUid(ClassInfoHelper
								.generateClassFieldUID(classInfo, fieldInfo));
		}
		
		if (StringUtils.isBlank(item.getSystemName())) {
			item.setSystemName(
						ClassInfoHelper
							.generateClassFieldSystemName(fieldInfo)
					);
		}

		if (StringUtils.isBlank(item.getName())) {
			item.setName(
					ClassInfoHelper
						.generateClassFieldName(fieldInfo)
				);
		}
	}

	private void filltemFieldsFromAnnotationParam(EnumerationItem item, AnnotationParameterValue param) {
		Object value = param.getValue();
		
		if (param.getName().equalsIgnoreCase(UID_PARAM_NAME)) {
			// Annotated UID has a priority over auto-generated
			String annotatedUID = value.toString();
			if (StringUtils.isNotBlank(annotatedUID)) {
				item.setUid(annotatedUID);
			}
			
		}
		else if (param.getName().equalsIgnoreCase(SYSTEM_NAME_PARAM_NAME)) {
			String annotatedSystemName = value.toString();
			// Annotated system name has a priority over auto-generated
			if (StringUtils.isNotBlank(annotatedSystemName)) {
				item.setSystemName(annotatedSystemName);
			}
		}
		else if (param.getName().equalsIgnoreCase(NAME_PARAM_NAME)) {
			String annotatedName = value.toString();
			// Annotated name has a priority over auto-generated
			if (StringUtils.isNotBlank(annotatedName)) {
				item.setName(annotatedName);
			}
		}
		else if (param.getName().equalsIgnoreCase(DESCRIPTION_PARAM_NAME)) {
			String annotatedDescription = value.toString();
			if (StringUtils.isNotBlank(annotatedDescription)) {
				item.setDescription(annotatedDescription);
			}
		}
	}

	private void fillEnumFieldsFromAnnotationParam(Enumeration enumeration, AnnotationParameterValue param) {
		Object value = param.getValue();
		if (param.getName().equalsIgnoreCase(UID_PARAM_NAME)) {
			// Annotated UID has a priority over auto-generated
			String annotatedUID = value.toString();
			if (StringUtils.isNotBlank(annotatedUID)) {
				enumeration.setUid(annotatedUID);
			}
		}
		else if (param.getName().equalsIgnoreCase(SYSTEM_NAME_PARAM_NAME)) {
			String annotatedSystemName = value.toString();
			// Annotated system name has a priority over auto-generated
			if (StringUtils.isNotBlank(annotatedSystemName)) {
				enumeration.setSystemName(annotatedSystemName);
			}
		}
		else if (param.getName().equalsIgnoreCase(NAME_PARAM_NAME)) {
			String annotatedName = value.toString();
			// Annotated name has a priority over auto-generated
			if (StringUtils.isNotBlank(annotatedName)) {
				enumeration.setName(annotatedName);
			}
		}
		else if (param.getName().equalsIgnoreCase(DESCRIPTION_PARAM_NAME)) {
			String annotatedDescription = value.toString();
			if (StringUtils.isNotBlank(annotatedDescription)) {
				enumeration.setDescription(annotatedDescription);
			}
		}
	}
	
	private void fillEnumFieldsWithAutogeneratedValues(Enumeration enumeration, ClassInfo classInfo) {
		if (StringUtils.isBlank(enumeration.getUid())) {
			enumeration.setUid(ClassInfoHelper.generateClassUID(classInfo));
		}
		
		if (StringUtils.isBlank(enumeration.getSystemName())) {
			enumeration.setSystemName(
						ClassInfoHelper
							.generateClassSystemName(classInfo)
					);
		}
		if (StringUtils.isBlank(enumeration.getName())) {
			enumeration.setName(
					ClassInfoHelper
						.generateClassName(classInfo)
				);
		}
	}


}